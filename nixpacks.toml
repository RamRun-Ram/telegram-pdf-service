# nixpacks.toml

# Nixpacks будет управлять всем процессом сборки.
# Мы хотим создать Nix-окружение (эквивалент shell.nix),
# которое включает Node.js v20, npm и chromium.

[build]
# Используем Nix как основной инструмент сборки.
providers = ["nix"]

# Явно указываем версию Nixpkgs.
# Крайне важно использовать версию, которая точно поддерживает Node.js 20.
# Попробуйте конкретную ветку stable или unstable.
# `nixos-23.11` - хорошая стабильная ветка.
# `nixos-unstable` - самая свежая, но может содержать баги.
# Вам может потребоваться поэкспериментировать с конкретным коммитом, если ветки не работают.
pkgsArchive = "https://github.com/NixOS/nixpkgs/archive/refs/heads/nixos-23.05.tar.gz" # Попробуйте эту ссылку, это новая стабильная версия
# Если не поможет, попробуйте: "https://github.com/NixOS/nixpkgs/archive/refs/heads/nixos-23.11.tar.gz"
# Или: "https://github.com/NixOS/nixpkgs/archive/refs/heads/nixos-unstable.tar.gz"

# Описываем построение Nix-окружения.
# Это похоже на написание shell.nix или default.nix.
# Это говорит Nix, что нужно собрать и сделать доступным.
[nix.expression]
render = """
let
  # Импортируем Nixpkgs из указанного архива.
  pkgs = import pkgsArchive {};

  # Определяем окружение Node.js v20.
  # пакет `nodejs_20` уже включает npm.
  nodejsEnv = pkgs.nodejsPackages.nodejs_20; # Используем пакет nodejs_20

in
# Создаем оболочку (shell) для нашего приложения.
pkgs.mkShell {
  # Список пакетов, которые будут доступны в среде.
  # Это системные пакеты.
  packages = [
    nodejsEnv      # Делает `node`, `npm`, `npx` доступными из Node.js 20
    pkgs.chromium  # Сам браузер Chromium.

    # Системные библиотеки, которые могут потребоваться Chromium для работы
    # (часто включены в пакет chromium, но иногда стоит добавить явно)
    pkgs.libgbm
    pkgs.freetype
    pkgs.pango
    pkgs.libcups
    pkgs.libXrender
    pkgs.libXext
    pkgs.glibc # базовая библиотека C, нужна почти везде
    pkgs.libnotify
  ];

  # Устанавливаем переменные окружения ОДИН РАЗ при создании окружения.
  # Это более надежный способ, чем установка их в startCommand.
  shellHook = ''
    echo "--- Nix Environment Setup ---"
    echo "Nixpkgs source: ${pkgsArchive}"
    echo "Node.js version: $(node --version)"
    echo "npm version: $(npm --version)"
    echo "Chromium path: ${pkgs.chromium}/bin/chromium"
    echo "---------------------------"

    # Устанавливаем необходимые переменные для Chromium/Puppeteer.
    export CHROMIUM_PATH="${pkgs.chromium}/bin/chromium"
    export PUPPETEER_EXECUTABLE_PATH="${pkgs.chromium}/bin/chromium" # Если используется Puppeteer

    # Включаем директорию Node.js v20 в PATH.
    # Это гарантирует, что 'node' и 'npm' будут из нужной версии.
    export PATH="${pkgs.nodejs_20.bin}:$PATH"
    export PATH="${pkgs.npm}/bin:$PATH" # Для надежности, чтобы npm тоже был из правильной версии
  '';
}
"""

# Команды, которые будут выполняться при сборке и запуске.
# Эти команды выполняются ВНУТРИ Nix-окружения, описанного выше.
installCommand = "npm ci" # Устанавливаем зависимости проекта.
startCommand = """
echo "--- Application Startup ---"
# Проверяем версии, так как PATH был изменен в shellHook Nix.
echo "Using Node.js version: $(node --version)"
echo "Using npm version: $(npm --version)"
echo "Chromium path (from env): ${CHROMIUM_PATH}"
echo "Node binary path: $(which node)"

# запускаем приложение.
# Если ваш главный файл не 'index.js' или не в корне, измените путь.
# Часто это 'server/index.js' или 'dist/index.js'.
node server/index.js
"""