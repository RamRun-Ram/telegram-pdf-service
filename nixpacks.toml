# nixpacks.toml

[build]
# Указываем, что для сборки используется Nix.
providers = ["nix"]

[nix]
# Использование nodejsSetup — лучший способ гарантировать установку и настройку
# нужной версии Node.js, включая правильное определение PATH.
nodejsSetup = { version = "20" } # Явно указываем Node.js версии 20

# Список других пакетов, которые ваш сервис требует.
packages = [
  # npm обычно идет вместе с Node.js, но явное указание не помешает.
  "npm",
  # Chromium — это то, что нужно для конвертации HTML в PDF.
  "chromium"
]

# =============================================================
#         СЕКЦИЯ ПЕРЕМЕННЫХ ОКРУЖЕНИЯ (ВАЖНО!)
# =============================================================
[nix.env]
# Переменная, которую библиотеки типа Puppeteer ищут для определения пути к Chromium.
# Nixpacks решает $pkgs.chromium в реальный путь.
CHROMIUM_PATH = "$pkgs.chromium/bin/chromium"
# Так как Chromium используется часто через Puppeteer, добавим и это.
PUPPETEER_EXECUTABLE_PATH = "$pkgs.chromium/bin/chromium"

# =============================================================
#         КОМАНДЫ ДЛЯ СБОРКИ И ЗАПУСКА (ВАЖНО!)
# =============================================================
# Явно указываем команды. Это помогает гарантировать, что они будут
# выполняться в правильной Nix-среде, что снижает вероятность
# проблем с версией Node.js (как EBADENGINE).

# Команда для установки зависимостей. 'npm ci' рекомендуется для CI/CD,
# так как он быстрее и надежнее, чем 'npm install'.
installCommand = "npm ci"

# Команда для запуска вашего приложения. Предполагаем, что в вашем package.json
# есть скрипт "start" (например, "start": "node index.js").
startCommand = "npm start"