# nixpacks.toml

[build]
# Использование Nix как менеджера пакетов.
providers = ["nix"]

[nix]
# Явно указываем, что мы хотим использовать Node.js версии 20.
# nodejsSetup гарантирует правильную установку и настройку PATH.
nodejsSetup = { version = "20" }

# Пакеты, которые необходимы вашему сервису.
packages = [
  "npm",          # npm обычно идет с Node.js, но для надежности укажем.
  "chromium",     # Необходим для конвертации HTML в PDF.
  # Если ваш сервис требует дополнительных системных библиотек (например, для графики),
  # их можно добавить сюда, например: "libgbm", "freetype", "pango", "libcups".
]

# Переменные окружения, которые часто используются библиотеками для работы с браузерами.
[nix.env]
CHROMIUM_PATH = "$pkgs.chromium/bin/chromium"
PUPPETEER_EXECUTABLE_PATH = "$pkgs.chromium/bin/chromium" # Если ваш сервис использует Puppeteer

# =====================================================================
#       КОМАНДЫ ДЛЯ СБОРКИ И ЗАПУСКА, С ДИАГНОСТИКОЙ
# =====================================================================

# Команда для установки зависимостей. 'npm ci' предпочтительнее для CI.
installCommand = "npm ci"

# Главная команда для запуска вашего приложения.
# Здесь мы добавляем вывод версий Node.js перед запуском самого приложения.
# Это поможет понять, какая версия Node.js действительно доступна.
startCommand = """
echo "--- Node.js Environment Diagnosis ---"

# 1. Прямой вызов Node.js из Nix-окружения (наиболее надежно)
echo "Nix-managed Node.js version: $($pkgs.nodejs_20/bin/node --version)"

# 2. Проверка версии Node.js, найденной в PATH (как её видит `npm start`)
echo "Node.js version in PATH (via 'node --version'): $(node --version)"

echo "--- Starting application --"

# Запускаем ваше приложение, передавая CHROMIUM_PATH для надежности.
CHROMIUM_PATH="$pkgs.chromium/bin/chromium" npm start
"""